@using Handbook.Client.Services.UserService
@using Handbook.Shared

@page "/users"
@inject IUserService UserService;

<UserForm Header="Добавить пользователя"
          User="@user"
          ButtonText="Добавить"
          ButtonStyle="info"
          OnSubmit="@Create" />

@if (users == null)
{
    <span>Список пользователей загружается...</span>
}
else
{
    if (users.Count == 0)
    {
        <span>Список пользователей пуст.</span>
        return;
    }
    <table class="table">
        <thead>
            <tr>
                <th>Фамилия</th>
                <th>Имя</th>
                <th>Отчество</th>
                <th>Домен AD</th>
                <th>Логин AD</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.LastName</td>
                    <td>@user.FirstName</td>
                    <td>@user.Patronymic</td>
                    <td>@user.ActiveDirectoryLogin?.Domain</td>
                    <td>@user.ActiveDirectoryLogin?.Login</td>
                    <td>
                        <a class="btn btn-info" href="editUser/@user.Id">
                            <i class="oi oi-pencil"></i>
                        </a>
                        <button class="btn btn-info" onclick="@(async () => await DeleteUser(user.Id))">
                            <i class="oi oi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<User> users;
    private User user = new();

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
    }

    private async void Create()
    {
        await UserService.AddUserAsync(user);
        await GetUsers();
        user = new();
        StateHasChanged();
    }

    private async Task GetUsers()
    {
        users = await UserService.GetAllUsersAsync();

    }

    private async Task DeleteUser(int id)
    {
        await UserService.RemoveUserAsync(id);
        await GetUsers();
        StateHasChanged();
    }
}
